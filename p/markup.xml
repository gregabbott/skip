<?xml-stylesheet type="text/xsl" href="../0/0.xsl"?><x>
---
name: Markup
date: 2025-08-28
---
<!-- 
Project: SKIP
Copyright 2025 Greg Abbott 
V1 2025-08-26
V 2025-08-28
-->
Skip parses [[plain text]], mark up and Markdown to HTML with [[parts|XSLT]].

This page covers the mix of markup conventions Skip uses to transform text.

## YAML
Pages can set and store metadata by starting with a YAML block.

```
---
name: Page Title
date: yyyy-MM-dd
---
```

### Name
- The YAML name (display) and file name (url) should pair:
-- e.g. `Page Title` should save as `page-title`
-- This simplifies writing [[#links]]:
--- `[[Some Page Name]]` will point to `some-page-name.xml`.

### Date
- Accepts any pattern with digits given in big to small order:
-- yyyy MM dd hh mm ss µµµ (any non digit between)
-- e.g. `yyyy`, `yyyy-MM-ddThh:mm:ss`, `yyyy_MMdd_hhmm`


## Headings

```
# 1 Hash Heading
## 2 Hash Heading
### 3 Hash Heading
#### 4 Hash Heading
##### 5 Hash Heading
###### 6 Hash Heading
```

The parser:
- Generates URL safe IDs for each heading.
- Adds anchor link to each heading.
- Makes a map^[Table of Contents] if the markup has multiple headings.

### Lead Section
Any content before any first heading goes into a "Lead" section.
This section sits between the page title and the page map.

## Keyboard
- Tab key should navigate the page (subject to browser config)
- Access keys should jump to page sections
-- 1: Top
-- 2: Toggle Map
-- 3: Start of post

## Links
### Regular
- External:
-- Raw link (URL without markup): https://example.com
-- With link text [Example](https://example.com)
-- Without link text [](https://example.com)
--- Extracts domain from URL for link text.
- Same site
-- Different page
--- With text
---- With extension [Change Log](log.xml)
---- Without extension [Change Log](log)
----- With with jump link [Section of interest](Other#section of interest)
--- Without link text
---- With extension [](Other.xml)
---- Without extension [](Log)
----- With jump link [](Other#section of interest)
- Same page (Jump link)
-- With link text [Links](#Links)
-- Without link text [](#Links)
--- Both use the case given in the URL hash

### Wikilinks
- Different page
-- Without custom link text
--- One word page name: [[Other]]
--- [[Multi word page name]]
--- Parse URL from any display case: [[Multi WORD page NAME]]
--- With jump link [[Other#section of interest|Section name]]
-- With custom text name [[OtHeR|Another page]]
- Same page (Jump links to section on the same page)
-- Parse URL from any display case (handle spaces)
--- [[#WikiLinks]]
--- upper [[#WIKILINKS]]
--- lower [[#wikilinks]]
-- With [[#wikilinks|custom jump link text]]

## Footnotes
Inline style only ^[Footnote text]. Handle long footnotes ^[Long footnotes should wrap. Their base should stay in the same position as they grow in height.]

## Formatting
Sequential: Normal text, **bold** text, *italic* text, ~~strike-through~~ text, `inline code` text, [link to log](log).

Mixed: **bold and *italic* together** or ~~**bold strike-through**~~.

## Lists

### Unordered
#### Flat
- Item 1
- Item 2 with *italic*.
- Item 3 with **bold text**
- Item 4 with `inline code`
- Item 5

#### Nested
Instead of indents and whitespace,
use N dashes to represent depth level in a list:

```
Example
- 0 indents
-- 1 indent
--- 2 indents
-- 1 indent
- 0 indents
```

*Example and test of a nested list with inline formatting*

- Parent
-- Child - **bold**
-- Child - *italic*
--- Grandchild ~~strike~~
--- Grandchild
---- Great grandchild [MD Link](#nested)
-- Child [[#nested|Wikilink]]
- Parent

### Ordered
(And mixed content check)

1. First **numbered** item 
2. Second [numbered](#ordered lists) item
3. `Third item` with *italic text*
4. Fourth item with ~~strikethrough~~
5. Fifth item

### Tasks

Via:

```
- [ ] To do
- [X] Done
```

- [ ] Do
- [x] Done (via lowercase x)
- [X] Done (via uppercase X)
- [ ] Handle todo with **inline formatting**.
- [X] Handle done with `inline formatting`.

## Blocks
### Quotes

```blockquote
Alternate block quote syntax to suit XSLT:

- **Start** a block quote with:
-- newline, 3 backticks, the string `blockquote`, newline.
- **Content** Enter the content on lines after the open tag.
- **End** the block quote with a line equal to 3 backticks.

Block quotes may contain **bold text**, *italic text*, and `inline code`.

Block quotes support multiple paragraphs.
```

### Code

```
const log = a => {
  console.log(a)
  return a
}

log(`hello`)
```

### HTML
Because HTML in normal code fences clashes with XML,
the markup has a dedicated HTML block markup.

#### Show
<html show="code">
<div style="background: #ffff0050; padding: 10px;">
  <h3>Present HTML as Code</h3>
</div>
</html>

#### Render
<html>
<div style="background: #ffff0050; padding: 10px;">
<h3>The tool renders the HTML in this block</h3>
To print angle brackets type: '&lt;' and '&gt;' (See markup)
</div>
</html>

Inline JavaScript runs if included in the above block type.

## Horizontal Rules

3 dashes style:

---

3 asterisk style:

***

## Images
### Alone

![Alt text displays on clicking image](f.png)

### Inline
Before ![Alt text with inline image](smile.png) after.

## Tables
Via JSON array of arrays, in a code block named 'table'.

```table
[
  ["Feature"        ,"Example"                                ],
  ["Touching lines" ,"Joins touching lines\nwith spaces."     ],
  ["Paragraphs"     ,"Two linebreaks:\n\nseparate paragraphs."],
  ["Inline Styles"  ,"Handle **bold** and *italic* etc."      ],
  ["Links in Cells" ,"Test [[log]] End Test"                  ]
]
```

## Folds

```details
A details block holds normal content in a folding element:

*Paragraphs* `with` ~~Inline~~ **styles**.

- Lists
```

```details "Optional summary"

Details elements don't ^[but could] hold other blocks.

```

## Empty Lines and Spacing

Empty lines follow this line in the markup.



This paragraph follows empty lines in the markup.
</x>